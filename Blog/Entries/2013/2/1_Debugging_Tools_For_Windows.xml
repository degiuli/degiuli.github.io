<?xml version="1.0"?>
<content collectionGUID="FB58F55C-9585-4C68-BAD6-2F593DC4614A">
  <lastEdited clientType="local-build-20130324" date="2013-03-24 21:04:13 +0000"/>
  <textBox id="generic-header-attribute" dynamic="no" visible="yes">
    <richText>&lt;a href="perma://BLPageReference/2D085D6A-902D-4579-899A-CF8E11275EFB"&gt;Windows Debugging Series&lt;/a&gt;</richText>
  </textBox>
  <textBox id="generic-title-attributes" dynamic="no" visible="yes">
    <richText>Debugging Tools For Windows</richText>
  </textBox>
  <textBox id="generic-datefield-attributes" dynamic="no" visible="yes">
    <richText>1 de fevereiro de 2013</richText>
  </textBox>
  <textBox id="generic-body-attributes" dynamic="no" visible="yes">
    <richText>There are vast number of debugging tools available and Microsoft also provider lots of free tools. Perhaps the most common and important, is not actually a tool but a set of tools called &lt;a href="http://msdn.microsoft.com/en-us/windows/hardware/gg463009.aspx"&gt;Debugging Tools for Windows&lt;/a&gt;. This collection of tools is freely available as part of Windows Driver Kit (WDK) or Windows SDK. The list of tools that are part of the this package are:&#xD;&#xD;&lt;a href="perma://BLPageReference/7E62AFE5-8899-42B7-A6F9-E97B1E11263B"&gt;adplus&lt;/a&gt; - originally a vbs script and now a executable tool, is able to collect dump files from different conditions.&#xD;agestore.exe - handy file deletion utility that deletes files based on the last access date.&#xD;cdb.exe &amp; ntsd.exe - both are console-based user mode debugger and are virtually identical.&#xD;dbengprx.exe - lightweight proxy server that relays data between two different machines.&#xD;dbgrpc.exe - tool used to query and display MS Remote Procedure Call (RPC) information.&#xD;dbgsrv.exe - process server used for remote debugging.&#xD;dumpchk.exe - tool used to validate a memory dump file. This tools is quite useful when the dump file is partially corrupted. For such problem, other tools may not be able to retrieve information from the file, but the dumpchk can. For this, type in the prompt: dumpchk -z dumpfile.dmp.&#xD;&lt;a href="perma://BLPageReference/67BEBB94-BAA7-41FC-A700-13B4F8FBCE2F"&gt;gflags.exe&lt;/a&gt; - configuration tool used to enable and disable system instrumentation. See more details below in this post.&#xD;kd.exe - kernel mode debugger.&#xD;kdbgctrl.exe - tool used to control and configure a kernel mode debug connection.&#xD;kdsrv.exe - connection server used during kernel mode debugging.&#xD;kill.exe - console-based tool to terminate a process.&#xD;logger.exe - tool that logs the activity of a process (such as function call).&#xD;logviewer.exe - tool used to view log files generated by logger.exe.&#xD;remote.exe - tool used to remotely control console programs.&#xD;rlist.exe - remote process list viewer.&#xD;symchk.exe - tool used to validate symbol files or download symbol files from a symbol server.&#xD;symstore.exe - tool used to create and maintain a symbol store.&#xD;tlist.exe - tool to list all running processes.&#xD;umdh.exe - tool used for memory leak detection.&#xD;&lt;a href="perma://BLPageReference/9AB9878C-254E-484C-9DA7-551431324B22"&gt;windbg.exe&lt;/a&gt; - user mode and kernel mode debugger with a graphical user interface.&#xD;&#xD;Some of those tools, which have links associated with, are discussed in much more detail in related posts.&#xD;&#xD;&lt;i&gt;WinDbg&lt;/i&gt;&#xD;&#xD;WinDbg, which will be more detailed discussed in later posts, is one of the most important tool, if not the most important. As said, it is a debugger for both live and postmortem applications.&#xD;&#xD;It can be started as normal Windows application via Start menu or run from a command line. Running from command line is particularly useful because some option can instantly use when the an application is attached/started or a dump is opened.&#xD;&#xD;&lt;b&gt;WinDbg command line:&lt;/b&gt;&#xD;&#xD;Live debug (startup application):&#xD;windbg -ee c++ -i &lt;executable path&gt; -logo &lt;log file name&gt; -n -o -srcpath &lt;application source path&gt; -v -y &lt;symbol path&gt; &lt;application.exe&gt; &lt;application arguments...&gt;&#xD;&#xD;Live debug (for a running application):&#xD;windbg -ee c++ -i &lt;executable path&gt; -logo &lt;log file name&gt; -n -o -srcpath &lt;application source path&gt; -v -y &lt;symbol path&gt; -pb -p &lt;PID&gt;&#xD;or&#xD;windbg -ee c++ -i &lt;executable path&gt; -logo &lt;log file name&gt; -n -o -srcpath &lt;application source path&gt; -v -y &lt;symbol path&gt; -pb -pn &lt;unique process name&gt;&#xD;&#xD;Postmortem debug:&#xD;windbg -ee c++ -i &lt;executable path&gt; -logo &lt;log file name&gt; -n -o -srcpath &lt;application source path&gt; -v -y &lt;symbol path&gt; -z &lt;dump file&gt;&#xD;&#xD;Why are those options suggested?&#xD;-ee which also supports masm define the expression used: masm is for Microsoft Assembly&#xD;-logo which also can be -loga (appends new information in existing file), creates an empty log file that will be filled with all information that appears in WinDbg screen. It is particularly helpful for postmortem debugging because some command can create lots of information that becomes difficult to track in the screen.&#xD;&#xD;For more details, type: windbg -?&#xD;&#xD;Finally, virtually everything that is applied to this tool is also applied for CDB tool.</richText>
  </textBox>
</content>
